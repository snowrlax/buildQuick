generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Location {
  ip                   String
  network              String
  version              String
  city                 String
  region               String
  region_code          String
  country              String
  country_name         String
  country_code         String
  country_code_iso3    String
  country_capital      String
  country_tld          String
  continent_code       String
  in_eu                Boolean
  postal               String
  latitude             Int
  longitude            Int
  timezone             String
  utc_offset           String
  country_calling_code String
  currency             String
  currency_name        String
  languages            String
  country_area         Int
  country_population   Int
  asn                  String
  org                  String
}

model Visitor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ipAddress String
  location  Location
  device    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  password      String?  
  accounts      Account[]
  sessions      Session[]
  otpSecret     String?
  otpExpiry     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  userId               String  @db.ObjectId
  type                 String
  provider             String
  providerAccountId    String
  refresh_token        String?
  access_token         String?
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
